datasource db {
  provider     = "postgres"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

// USER AND AUTH
model User {
  id              Int            @id @default(autoincrement())
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  email           String         @unique
  name            String?
  drawings        Drawing[]      @relation("OwnerDrawings")
  collection      Drawing[]      @relation("Collection")
  sessions        Session[]
  OauthAccount    OauthAccount[]
}

model Session {
  id        String   @id
  userId    Int
  expiresAt DateTime
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model OauthAccount {
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  userId         Int
  provider       String // github, google, etc
  providerUserId String // id from the provider
  @@id([provider, providerUserId]) // composite primary key
  user           User     @relation(fields: [userId], references: [id])
}

// APPLICATION
enum Access {
  public
  private
  restricted
}

model Drawing {
  id        Int              @id @default(autoincrement())
  slug      String           @unique @default(uuid())
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  name      String?
  data      Json[]
  owner     User?            @relation("OwnerDrawings", fields: [ownerId], references: [id])
  ownerId   Int?
  users     User[]           @relation("Collection")
  access    Access           @default(public)
  order     String[]
  elements  DrawingElement[]
}

model DrawingElement {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  data      Json
  elementId String   @unique
  version   Int
  drawing   Drawing  @relation(fields: [drawingId], references: [id])
  drawingId Int
}

model Image {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  imageId   String   @unique
  name      String?
  data      String
  mimeType  String
}
