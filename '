import { wrapAsync } from "@banjoanton/utils";
import { createContextLogger } from "../lib/context-logger";
import { prisma } from "db";
import { Env } from "common";
import { BucketKey } from "../model/bucket/bucket-key";
import { ImageFile } from "../trpc/router/file";

const logger = createContextLogger("file-repository");
const env = Env.server();

const savePresignedImages = async (imageFile: ImageFile[], slug: string) => {
    logger.trace({ slug, imageFile }, "Saving bucket images to database");

    const [count, error] = await wrapAsync(async () => {
        const result = await prisma.bucketFile.createMany({
            data: imageFile.map(({ mimeType, imageId }) => {
                const key = BucketKey.from(imageId, slug, mimeType);
                return {
                    imageId,
                    bucket: env.CLOUDFLARE_BUCKET_NAME,
                    slug,
                    key,
                    mimeType,
                };
            }),
        });

        return result.count;
    });

    if (error) {
        logger.error({ error }, "Failed to save bucket image to database");
        return Result.error(error.message, "InternalError");
    }
};

export const FileRepository = { savePresignedImages };
